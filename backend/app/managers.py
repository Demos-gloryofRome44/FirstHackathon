import asyncio
import uuid
from typing import Dict, List
from fastapi import WebSocket
from websockets.exceptions import ConnectionClosed
import os
from datetime import datetime
import aiofiles
import time


class ConnectionManager:
    def __init__(self):
        self.active_pairs: Dict[str, Dict[str, WebSocket]] = {}
        self.waiting_clients: List[WebSocket] = []
        self.waiting_operators: List[WebSocket] = []
        self.lock = asyncio.Lock()
        self.audio_storage = "audio_sessions"
        os.makedirs(self.audio_storage, exist_ok=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        self.audio_buffers: Dict[str, Dict[str, List[bytes]]] = {}  # {session_id: {"client": [], "operator": []}}
        self.last_save_time: Dict[str, Dict[str, float]] = {} 

        print(f"Audio files will be saved to: {os.path.abspath(self.audio_storage)}")



    async def accept_connection(self, websocket: WebSocket) -> bool:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        try:
            await websocket.accept()
            print(f"Connection accepted from {websocket.client}")
            return True
        except Exception as e:
            print(f"Connection accept failed: {e}")
            return False

    async def connect_client(self, websocket: WebSocket) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not await self.accept_connection(websocket):
            return False
            
        async with self.lock:
            try:
                await websocket.send_json({"type": "waiting"})
                self.waiting_clients.append(websocket)
                print(f"New client connected. Total clients: {len(self.waiting_clients)}")
                await self._try_pair_connections()
                return True
            except Exception as e:
                print(f"Client connection error: {e}")
                return False

    async def connect_operator(self, websocket: WebSocket) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        if not await self.accept_connection(websocket):
            return False
            
        async with self.lock:
            try:
                self.waiting_operators.append(websocket)
                print(f"New operator connected. Total operators: {len(self.waiting_operators)}")
                await self._try_pair_connections()
                return True
            except Exception as e:
                print(f"Operator connection error: {e}")
                return False

    async def _try_pair_connections(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        while self.waiting_clients and self.waiting_operators:
            client = self.waiting_clients.pop(0)
            operator = self.waiting_operators.pop(0)
            
            session_id = str(uuid.uuid4())
            self.active_pairs[session_id] = {
                "client": client,
                "operator": operator
            }
            
            await asyncio.gather(
            client.send_json({
                "type": "call_connected",
                "session_id": session_id,
                "role": "client"
            }),
            operator.send_json({
                "type": "client_connected",
                "session_id": session_id,
                "role": "operator"
            })
        )
            try:
                await asyncio.gather(
                    client.send_json({"type": "call_connected", "session_id": session_id}),
                    operator.send_json({"type": "client_connected", "session_id": session_id})
                )
                print(f"Paired successfully. Session ID: {session_id}")
            except Exception as e:
                print(f"Pairing failed: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.waiting_clients.insert(0, client)
                self.waiting_operators.insert(0, operator)
                del self.active_pairs[session_id]
                break

    async def broadcast_audio(self, sender: WebSocket, data: bytes):
        print(f"üîä Received audio data: {len(data)} bytes")
        async with self.lock:
            for session_id, pair in list(self.active_pairs.items()):
                try:
                    if pair["client"] == sender:
                        print(f"üîÅ Forwarding to operator (session: {session_id})")
                        await pair["operator"].send_bytes(data)
                    # –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
                        await self._add_to_buffer(session_id, "operator", data)
                        return
                
                    if pair["operator"] == sender:
                        print(f"üîÅ Forwarding to client (session: {session_id})")
                        await pair["client"].send_bytes(data)
                        await self._add_to_buffer(session_id, "client", data)
                        return
                except ConnectionClosed:
                    await self._cleanup_connection(sender)
                except Exception as e:
                    print(f"Unexpected error: {e}")
                    continue

    async def _add_to_buffer(self, session_id: str, role: str, data: bytes):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if session_id not in self.audio_buffers:
            self.audio_buffers[session_id] = {"client": [], "operator": []}
            self.last_save_time[session_id] = {"client": time.time(), "operator": time.time()}
    
        self.audio_buffers[session_id][role].append(data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
        if time.time() - self.last_save_time[session_id][role] >= 10:
            await self._flush_buffer(session_id, role)

    async def _flush_buffer(self, session_id: str, role: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        if not self.audio_buffers.get(session_id, {}).get(role):
            return
    
        combined_data = b"".join(self.audio_buffers[session_id][role])
        if not combined_data:
            return
    
        # –î–æ–±–∞–≤–ª—è–µ–º WebM –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not combined_data.startswith(b'\x1a\x45\xdf\xa3'):
            header = (b'\x1a\x45\xdf\xa3\x01\x00\x00\x00\x00\x00\x00\x1f\x42\x86\x81\x01'
                 b'\x42\x84\x81\x01\x42\x85\x81\x01')
            combined_data = header + combined_data
    
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{session_id}_{role}_{timestamp}.webm"
        filepath = os.path.join(self.audio_storage, filename)
    
        try:
            async with aiofiles.open(filepath, 'wb') as f:
                await f.write(combined_data)
            print(f"‚úÖ Saved {len(combined_data)} bytes to {filename}")
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            self.audio_buffers[session_id][role] = []
            self.last_save_time[session_id][role] = time.time()
        except Exception as e:
            print(f"‚ùå Failed to save audio: {e}")

    async def _cleanup_connection(self, websocket: WebSocket):
        """–û—á–∏—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –∏ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"""
        async with self.lock:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π –æ–∂–∏–¥–∞–Ω–∏—è
            if websocket in self.waiting_clients:
                self.waiting_clients.remove(websocket)
                print("Removed client from waiting list")
                return
            
            if websocket in self.waiting_operators:
                self.waiting_operators.remove(websocket)
                print("Removed operator from waiting list")
                return
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
            for session_id, pair in list(self.active_pairs.items()):
                if websocket in [pair["client"], pair["operator"]]:
                # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–æ–≤
                    if hasattr(self, 'audio_buffers') and session_id in self.audio_buffers:
                        for role in ["client", "operator"]:
                            if self.audio_buffers[session_id][role]:
                                combined_data = b"".join(self.audio_buffers[session_id][role])
                                if combined_data:
                                    await self._safe_save_audio(session_id, role, b"")  # trigger final save
                
                # 2. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
                await self._delete_session_files(session_id)
                
                # 3. –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                other = pair["operator"] if websocket == pair["client"] else pair["client"]
                try:
                    await other.send_json({"type": "call_ended"})
                except:
                    pass
                del self.active_pairs[session_id]
                
                # 4. –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
                if hasattr(self, 'audio_buffers') and session_id in self.audio_buffers:
                    del self.audio_buffers[session_id]
                if hasattr(self, 'last_save_time') and session_id in self.last_save_time:
                    del self.last_save_time[session_id]
                
                print(f"Session {session_id} terminated and files cleaned")
                break


    async def _safe_save_audio(self, session_id: str, role: str, data: bytes):
        try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if not hasattr(self, 'audio_buffers'):
                self.audio_buffers = {}
            if not hasattr(self, 'last_save_time'):
                self.last_save_time = {}
            
            if session_id not in self.audio_buffers:
                self.audio_buffers[session_id] = {"client": [], "operator": []}
                self.last_save_time[session_id] = {"client": time.time(), "operator": time.time()}
        
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
            self.audio_buffers[session_id][role].append(data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
            if time.time() - self.last_save_time[session_id][role] >= 10:
                combined_data = b"".join(self.audio_buffers[session_id][role])
                if combined_data:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"{session_id}_{role}_{timestamp}.webm"
                    filepath = os.path.join(self.audio_storage, filename)
                
                    print(f"üìÅ Saving combined audio: {filepath}")
                
                    async with aiofiles.open(filepath, 'wb') as f:
                        await f.write(combined_data)
                        print(f"‚úÖ Successfully saved combined audio: {filename}")
                
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                    self.audio_buffers[session_id][role] = []
                    self.last_save_time[session_id][role] = time.time()
                
        except Exception as e:
            print(f"‚ùå Error in _safe_save_audio: {str(e)}")
            raise
            
    async def _write_file(self, path: str, data: bytes):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞"""
        try:
            async with aiofiles.open(path, 'wb') as f:
                await f.write(data)
        except Exception as e:
            print(f"Error writing file {path}: {e}")
            raise

    async def get_session_files(self, session_id: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        if not os.path.exists(self.audio_storage):
            return []
    
        session_files = []
        try:
            for filename in os.listdir(self.audio_storage):
                if filename.startswith(session_id):
                    filepath = os.path.join(self.audio_storage, filename)
                    if os.path.isfile(filepath):
                        session_files.append({
                            "filename": filename,
                            "size": os.path.getsize(filepath),
                            "modified": os.path.getmtime(filepath)
                        })
        except Exception as e:
            print(f"Error listing files: {e}")
            raise  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ FastAPI
    
        return session_files
    
    async def _delete_session_files(self, session_id: str):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Å—Å–∏–µ–π"""
        try:
            if not os.path.exists(self.audio_storage):
                return

            for filename in os.listdir(self.audio_storage):
                if filename.startswith(session_id):
                    filepath = os.path.join(self.audio_storage, filename)
                    try:
                        os.remove(filepath)
                        print(f"Deleted session file: {filename}")
                    except Exception as e:
                        print(f"Error deleting file {filename}: {e}")
        except Exception as e:
            print(f"Error in _delete_session_files: {e}")